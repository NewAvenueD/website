.hidden {
  @extend %visuallyhidden;

}
.centered {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}

.square {
  &:after {
    content: '';
    display: block;
    padding-bottom: 100%;
  }
}
$blackish: rgb(31, 1, 12);
///
/// Viewport sized typography with minimum and maximum values
///
/// @author Eduardo Boucas (@eduardoboucas)
///
/// @param {Number}   $responsive  - Viewport-based size
/// @param {Number}   $min         - Minimum font size (px)
/// @param {Number}   $max         - Maximum font size (px)
///                                  (optional)
/// @param {Number}   $fallback    - Fallback for viewport-
///                                  based units (optional)
///
/// @example scss - 5vw font size (with 50px fallback),
///                 minumum of 35px and maximum of 150px
///  @include responsive-font(5vw, 35px, 150px, 50px);
///
@mixin responsive-font($responsive, $min, $max: false, $fallback: false) {
  $responsive-unitless: $responsive / ($responsive - $responsive + 1);
  $dimension: if(unit($responsive) == 'vh', 'height', 'width');
  $min-breakpoint: $min / $responsive-unitless * 100;

  @media (max-#{$dimension}: #{$min-breakpoint}) {
    font-size: $min;
  }

  @if $max {
    $max-breakpoint: $max / $responsive-unitless * 100;

    @media (min-#{$dimension}: #{$max-breakpoint}) {
      font-size: $max;
    }
  }

  @if $fallback {
    font-size: $fallback;
  }

  font-size: $responsive;
}

/// Accessibly hide element
///
%visuallyhidden {
  margin: -1px;
  padding: 0;
  width: 1px;
  height: 1px;
  overflow: hidden;
  clip: rect(0 0 0 0);
  clip: rect(0, 0, 0, 0);
  position: absolute;
}

@mixin grayscale_element($value) {
    filter:#{"grayscale(#{$value})"};
}

// white line, margin under heading
@mixin separator($space: 1em) {
  position: relative;
  margin-bottom: $space;
  padding-bottom: $space;
  text-align: center;
  &:before {
    content: '';
    position: absolute;
    top: 100%;
    left: 50%;
    width: 86px;
    height: 1px;
    background-color: white;
    transform: translateX(-50%);
  }
}

/// long selectors, shorter

$menuOpen: "body[data-state-menu=open]";
$menuClosed: "body[data-state-menu=closed]";

$menTran: .43s;

// random colors
$blue: #3ea5ce;
$green: #99c712;
$yellow: lighten(#ffba00, 5%);
$red: #E53B3A;
